library(shiny)
# Define UI
ui <- fluidPage(
"Hello, world!"
)
# Define server logic
server <- function(input, output, session) {
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
"Hello, world!"
)
# Define server logic
server <- function(input, output, session) {
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
Sys.setenv("RP_DASHBOARD_INI"="/Users/sgarmeh/Downloads/TEST/test_data/database.ini")
shiny::runApp('Downloads/TEST/run_processing_dashboard/RunDashboard')
Sys.setenv("RP_DASHBOARD_INI"="/Users/sgarmeh/Downloads/TEST/test_data/database.ini")
runApp('Downloads/TEST/run_processing_dashboard/RunDashboard')
Sys.setenv("RP_DASHBOARD_INI"="/Users/sgarmeh/Desktop/test_dash/test_data/database.ini")
shiny::runApp('Downloads/TEST/run_processing_dashboard/RunDashboard')
Sys.setenv("RP_DASHBOARD_INI"="/Users/sgarmeh/Desktop/test_dash/test_data/database.ini")
runApp('Downloads/TEST/run_processing_dashboard/RunDashboard')
library(shiny); runApp('Desktop/snv-benchmarking-dashboard/app_test.r')
runApp('Desktop/snv-benchmarking-dashboard/app_test.r')
runApp('Desktop/snv-benchmarking-dashboard/app_test.r')
library(shiny); runApp('Desktop/snv-benchmarking-dashboard/app_test.r')
runApp('Desktop/snv-benchmarking-dashboard/app_test.r')
runApp('Desktop/snv-benchmarking-dashboard/app_test.r')
runApp('Desktop/snv-benchmarking-dashboard/app_test.r')
runApp('Desktop/snv-benchmarking-dashboard/app_test.r')
# Install required packages
if (!require("shiny")) install.packages("shiny")
if (!require("reticulate")) install.packages("reticulate")
library(reticulate)
library(shiny)
library(DT)
library(ggplot2)
library(reticulate)
cat("=== Quick Database Connection Test ===\n")
cat("Working directory:", getwd(), "\n")
# Get Python version safely
tryCatch({
py_info <- py_config()
cat("Python version:", py_info$version, "\n")
cat("Python executable:", py_info$python, "\n")
}, error = function(e) {
cat("Python info error:", e$message, "\n")
})
cat("\n")
# Test 1: Can we import the database module?
cat("Test 1: Importing database module...\n")
tryCatch({
database <- import("database")
cat("✅ SUCCESS: database module imported\n")
# Test 2: Can we call test_connection?
cat("Test 2: Calling test_connection()...\n")
result <- database$test_connection()
if (result) {
cat("✅ SUCCESS: Database connection works!\n")
cat("\nYou can now run the Shiny app:\n")
cat("shiny::runApp('app.R')\n")
} else {
cat("❌ FAILED: Database connection failed\n")
}
}, error = function(e) {
cat("❌ ERROR:", e$message, "\n")
cat("\nTroubleshooting:\n")
cat("1. Make sure these files are in your working directory:\n")
cat("   - database.py\n")
cat("   - models.py\n")
cat("   - benchmarking.db\n")
cat("2. Install Python packages: pip install pandas sqlalchemy\n")
})
cat("\n=== End Test ===\n")
runApp('Desktop/snv-benchmarking-dashboard/app_test.r')
library(shiny); runApp('app_test.r')
library(shiny); runApp('app_test.r')
shiny::runApp()
runApp()
reticulate::py_last_error()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
